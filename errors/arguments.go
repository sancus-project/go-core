package errors

//go:generate ./arguments.sh

import (
	"fmt"
	"strings"
)

// Code generated by ./arguments.sh DO NOT EDIT

// Convenience Error type
type ArgumentError struct {
	prefix string
	msg    string
	err    error
}

func (e ArgumentError) Unwrap() error {
	return e.err
}

func (e ArgumentError) Error() string {
	var s = []string{e.prefix}

	if len(e.msg) > 0 {
		s = append(s, e.msg)
	}

	if e.err != nil {
		s = append(s, e.err.Error())
	}

	return strings.Join(s, ": ")
}

// Creates new MissingFieldError formatting arguments
func ErrMissingField(str string, args ...interface{}) *ArgumentError {
	if len(args) > 0 {
		str = fmt.Sprintf(str, args...)
	}

	if len(str) > 0 {
		return &ArgumentError{"Missing Field", str, nil}
	}

	return nil
}

func AsMissingFieldError(err error, str string, args ...interface{}) *ArgumentError {
	if err != nil {
		if len(args) > 0 {
			str = fmt.Sprintf(str, args...)
		}

		return &ArgumentError{"Missing Field", str, err}
	}

	return nil
}

// Adds MissingField to ErrorStack
func (s *ErrorStack) MissingField(str string, args ...interface{}) {
	if err := ErrMissingField(str, args...); err != nil {
		s.errors = append(s.errors, err)
	}
}

// Adds wrapped error as MissingField to ErrorStack
func (s *ErrorStack) AppendMissingFieldError(err error, str string, args ...interface{}) {
	if e := AsMissingFieldError(err, str, args...); e != nil {
		s.errors = append(s.errors, e)
	}
}

// Creates new MissingArgumentError formatting arguments
func ErrMissingArgument(str string, args ...interface{}) *ArgumentError {
	if len(args) > 0 {
		str = fmt.Sprintf(str, args...)
	}

	if len(str) > 0 {
		return &ArgumentError{"Missing Argument", str, nil}
	}

	return nil
}

func AsMissingArgumentError(err error, str string, args ...interface{}) *ArgumentError {
	if err != nil {
		if len(args) > 0 {
			str = fmt.Sprintf(str, args...)
		}

		return &ArgumentError{"Missing Argument", str, err}
	}

	return nil
}

// Adds MissingArgument to ErrorStack
func (s *ErrorStack) MissingArgument(str string, args ...interface{}) {
	if err := ErrMissingArgument(str, args...); err != nil {
		s.errors = append(s.errors, err)
	}
}

// Adds wrapped error as MissingArgument to ErrorStack
func (s *ErrorStack) AppendMissingArgumentError(err error, str string, args ...interface{}) {
	if e := AsMissingArgumentError(err, str, args...); e != nil {
		s.errors = append(s.errors, e)
	}
}

// Creates new InvalidValueError formatting arguments
func ErrInvalidValue(str string, args ...interface{}) *ArgumentError {
	if len(args) > 0 {
		str = fmt.Sprintf(str, args...)
	}

	if len(str) > 0 {
		return &ArgumentError{"Invalid Value", str, nil}
	}

	return nil
}

func AsInvalidValueError(err error, str string, args ...interface{}) *ArgumentError {
	if err != nil {
		if len(args) > 0 {
			str = fmt.Sprintf(str, args...)
		}

		return &ArgumentError{"Invalid Value", str, err}
	}

	return nil
}

// Adds InvalidValue to ErrorStack
func (s *ErrorStack) InvalidValue(str string, args ...interface{}) {
	if err := ErrInvalidValue(str, args...); err != nil {
		s.errors = append(s.errors, err)
	}
}

// Adds wrapped error as InvalidValue to ErrorStack
func (s *ErrorStack) AppendInvalidValueError(err error, str string, args ...interface{}) {
	if e := AsInvalidValueError(err, str, args...); e != nil {
		s.errors = append(s.errors, e)
	}
}

// Creates new InvalidArgumentError formatting arguments
func ErrInvalidArgument(str string, args ...interface{}) *ArgumentError {
	if len(args) > 0 {
		str = fmt.Sprintf(str, args...)
	}

	if len(str) > 0 {
		return &ArgumentError{"Invalid Argument", str, nil}
	}

	return nil
}

func AsInvalidArgumentError(err error, str string, args ...interface{}) *ArgumentError {
	if err != nil {
		if len(args) > 0 {
			str = fmt.Sprintf(str, args...)
		}

		return &ArgumentError{"Invalid Argument", str, err}
	}

	return nil
}

// Adds InvalidArgument to ErrorStack
func (s *ErrorStack) InvalidArgument(str string, args ...interface{}) {
	if err := ErrInvalidArgument(str, args...); err != nil {
		s.errors = append(s.errors, err)
	}
}

// Adds wrapped error as InvalidArgument to ErrorStack
func (s *ErrorStack) AppendInvalidArgumentError(err error, str string, args ...interface{}) {
	if e := AsInvalidArgumentError(err, str, args...); e != nil {
		s.errors = append(s.errors, e)
	}
}

// Creates new NotImplementedError formatting arguments
func ErrNotImplemented(str string, args ...interface{}) *ArgumentError {
	if len(args) > 0 {
		str = fmt.Sprintf(str, args...)
	}

	if len(str) > 0 {
		return &ArgumentError{"Not Implemented", str, nil}
	}

	return nil
}

func AsNotImplementedError(err error, str string, args ...interface{}) *ArgumentError {
	if err != nil {
		if len(args) > 0 {
			str = fmt.Sprintf(str, args...)
		}

		return &ArgumentError{"Not Implemented", str, err}
	}

	return nil
}

// Adds NotImplemented to ErrorStack
func (s *ErrorStack) NotImplemented(str string, args ...interface{}) {
	if err := ErrNotImplemented(str, args...); err != nil {
		s.errors = append(s.errors, err)
	}
}

// Adds wrapped error as NotImplemented to ErrorStack
func (s *ErrorStack) AppendNotImplementedError(err error, str string, args ...interface{}) {
	if e := AsNotImplementedError(err, str, args...); e != nil {
		s.errors = append(s.errors, e)
	}
}
