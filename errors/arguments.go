package errors

//go:generate ./arguments.sh

import (
	"fmt"
)

// Code generated by ./arguments.sh DO NOT EDIT

// Error representing a Missing Field
type MissingFieldError struct {
	s   string
	err error
}

func (e MissingFieldError) Unwrap() error {
	return e.err
}

func (e MissingFieldError) Error() string {
	s := "Missing Field"

	if len(e.s) > 0 {
		s = fmt.Sprintf("%s: %s", s, e.s)
	}

	if e.err != nil {
		s = fmt.Sprintf("%s: %s", s, e.err.Error())
	}

	return s
}

// Creates new MissingFieldError formatting arguments
func ErrMissingField(str string, args ...interface{}) *MissingFieldError {
	if len(args) > 0 {
		str = fmt.Sprintf(str, args...)
	}

	if len(str) > 0 {
		return &MissingFieldError{str, nil}
	}

	return nil
}

func AsMissingFieldError(err error, str string, args ...interface{}) *MissingFieldError {
	if err != nil {
		e := ErrMissingField(str, args...)
		if e != nil {
			e.err = err
		} else {
			e = &MissingFieldError{"", err}
		}
		return e
	}
	return nil
}

// Adds MissingField to ErrorStack
func (s *ErrorStack) MissingField(str string, args ...interface{}) {
	if err := ErrMissingField(str, args...); err != nil {
		s.errors = append(s.errors, err)
	}
}

// Adds wrapped error as MissingField to ErrorStack
func (s *ErrorStack) AppendMissingFieldError(err error, str string, args ...interface{}) {
	if e := AsMissingFieldError(err, str, args...); e != nil {
		s.errors = append(s.errors, e)
	}
}

// Error representing a Missing Argument
type MissingArgumentError struct {
	s   string
	err error
}

func (e MissingArgumentError) Unwrap() error {
	return e.err
}

func (e MissingArgumentError) Error() string {
	s := "Missing Argument"

	if len(e.s) > 0 {
		s = fmt.Sprintf("%s: %s", s, e.s)
	}

	if e.err != nil {
		s = fmt.Sprintf("%s: %s", s, e.err.Error())
	}

	return s
}

// Creates new MissingArgumentError formatting arguments
func ErrMissingArgument(str string, args ...interface{}) *MissingArgumentError {
	if len(args) > 0 {
		str = fmt.Sprintf(str, args...)
	}

	if len(str) > 0 {
		return &MissingArgumentError{str, nil}
	}

	return nil
}

func AsMissingArgumentError(err error, str string, args ...interface{}) *MissingArgumentError {
	if err != nil {
		e := ErrMissingArgument(str, args...)
		if e != nil {
			e.err = err
		} else {
			e = &MissingArgumentError{"", err}
		}
		return e
	}
	return nil
}

// Adds MissingArgument to ErrorStack
func (s *ErrorStack) MissingArgument(str string, args ...interface{}) {
	if err := ErrMissingArgument(str, args...); err != nil {
		s.errors = append(s.errors, err)
	}
}

// Adds wrapped error as MissingArgument to ErrorStack
func (s *ErrorStack) AppendMissingArgumentError(err error, str string, args ...interface{}) {
	if e := AsMissingArgumentError(err, str, args...); e != nil {
		s.errors = append(s.errors, e)
	}
}

// Error representing a Invalid Value
type InvalidValueError struct {
	s   string
	err error
}

func (e InvalidValueError) Unwrap() error {
	return e.err
}

func (e InvalidValueError) Error() string {
	s := "Invalid Value"

	if len(e.s) > 0 {
		s = fmt.Sprintf("%s: %s", s, e.s)
	}

	if e.err != nil {
		s = fmt.Sprintf("%s: %s", s, e.err.Error())
	}

	return s
}

// Creates new InvalidValueError formatting arguments
func ErrInvalidValue(str string, args ...interface{}) *InvalidValueError {
	if len(args) > 0 {
		str = fmt.Sprintf(str, args...)
	}

	if len(str) > 0 {
		return &InvalidValueError{str, nil}
	}

	return nil
}

func AsInvalidValueError(err error, str string, args ...interface{}) *InvalidValueError {
	if err != nil {
		e := ErrInvalidValue(str, args...)
		if e != nil {
			e.err = err
		} else {
			e = &InvalidValueError{"", err}
		}
		return e
	}
	return nil
}

// Adds InvalidValue to ErrorStack
func (s *ErrorStack) InvalidValue(str string, args ...interface{}) {
	if err := ErrInvalidValue(str, args...); err != nil {
		s.errors = append(s.errors, err)
	}
}

// Adds wrapped error as InvalidValue to ErrorStack
func (s *ErrorStack) AppendInvalidValueError(err error, str string, args ...interface{}) {
	if e := AsInvalidValueError(err, str, args...); e != nil {
		s.errors = append(s.errors, e)
	}
}

// Error representing a Invalid Argument
type InvalidArgumentError struct {
	s   string
	err error
}

func (e InvalidArgumentError) Unwrap() error {
	return e.err
}

func (e InvalidArgumentError) Error() string {
	s := "Invalid Argument"

	if len(e.s) > 0 {
		s = fmt.Sprintf("%s: %s", s, e.s)
	}

	if e.err != nil {
		s = fmt.Sprintf("%s: %s", s, e.err.Error())
	}

	return s
}

// Creates new InvalidArgumentError formatting arguments
func ErrInvalidArgument(str string, args ...interface{}) *InvalidArgumentError {
	if len(args) > 0 {
		str = fmt.Sprintf(str, args...)
	}

	if len(str) > 0 {
		return &InvalidArgumentError{str, nil}
	}

	return nil
}

func AsInvalidArgumentError(err error, str string, args ...interface{}) *InvalidArgumentError {
	if err != nil {
		e := ErrInvalidArgument(str, args...)
		if e != nil {
			e.err = err
		} else {
			e = &InvalidArgumentError{"", err}
		}
		return e
	}
	return nil
}

// Adds InvalidArgument to ErrorStack
func (s *ErrorStack) InvalidArgument(str string, args ...interface{}) {
	if err := ErrInvalidArgument(str, args...); err != nil {
		s.errors = append(s.errors, err)
	}
}

// Adds wrapped error as InvalidArgument to ErrorStack
func (s *ErrorStack) AppendInvalidArgumentError(err error, str string, args ...interface{}) {
	if e := AsInvalidArgumentError(err, str, args...); e != nil {
		s.errors = append(s.errors, e)
	}
}
